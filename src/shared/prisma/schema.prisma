datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String   @id @default(cuid())
  name     String?
  email    String   @unique
  password String
  image    String?
  role     UserRole @default(USER)

  order Order?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

enum UserRole {
  USER
  ADMIN
}

model Category {
  id              Int     @id @default(autoincrement())
  name            String
  metaTitle       String?
  metaDescription String?
  text            String?
  image           String?
  alias           String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Product {
  id              Int      @id @default(autoincrement())
  name            String
  metaTitle       String?
  metaDescription String?
  text            String?
  image           String
  images          String[]
  alias           String   @unique
  price           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Связи
  categories Category           @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  categoryId Int
  colors     ColorsOnProducts[]
  order      Order[]

  // Связи с другими товарами (как источник)
  relatedFrom RelatedProducts[] @relation("RelatedFrom")
  // Связи с другими товарами (как цель)
  relatedTo   RelatedProducts[] @relation("RelatedTo")

  @@index([alias])
  @@index([categoryId])
}

model RelatedProducts {
  id   Int                 @id @default(autoincrement())
  type ProductRelationType

  // От какого товара связь (источник)
  fromProduct   Product @relation("RelatedFrom", fields: [fromProductId], references: [id], onDelete: Cascade)
  fromProductId Int

  // К какому товару связь (цель)
  toProduct   Product @relation("RelatedTo", fields: [toProductId], references: [id], onDelete: Cascade)
  toProductId Int

  // Уникальный ключ, чтобы избежать дубликатов связей
  @@unique([fromProductId, toProductId, type])
}

enum ProductRelationType {
  UPSELL
  BUNDLE
  SIMILAR
  CROSS_SELL
}

model Color {
  id    Int    @id @default(autoincrement())
  name  String
  image String

  products ColorsOnProducts[]
}

model ColorsOnProducts {
  color      Color    @relation(fields: [colorId], references: [id])
  colorId    Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([colorId, productId])
}

model Order {
  id     Int         @id @default(autoincrement())
  status OrderStatus @default(PENDING)
  name   String
  phone  String
  mail   String?

  products  Product @relation(fields: [productId], references: [id])
  productId Int

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  FINISHED
  CANCELED
}

model Callback {
  id    Int     @id @default(autoincrement())
  name  String
  mail  String?
  phone String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Slide {
  id                  Int     @id @default(autoincrement())
  title               String?
  subTitle            String?
  informerTitle       String?
  informerDescription String?
  buttonText          String?
  href                String?
  imageSrc            String
}

model Page {
  id Int @id @default(autoincrement())

  name            String
  metaTitle       String?
  metaDescription String?
  text            String
  alias           String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
