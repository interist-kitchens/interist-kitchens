generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  phone     String?
  password  String
  image     String?
  role      UserRole  @default(USER)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]

  @@index([email])
}

model Category {
  id              Int       @id @default(autoincrement())
  name            String
  metaTitle       String?
  metaDescription String?
  text            String?
  image           String?
  alias           String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  products        Product[]
}

model Product {
  id              Int                @id @default(autoincrement())
  name            String
  metaTitle       String?
  metaDescription String?
  text            String?
  image           String
  images          String[]
  alias           String             @unique
  price           String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  categoryId      Int
  colors          ColorsOnProducts[]
  orderItems      OrderItem[]
  categories      Category           @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  IndividualOrder IndividualOrder[]

  // Связи с другими товарами (как источник)
  relatedFrom RelatedProducts[] @relation("RelatedFrom")
  // Связи с другими товарами (как цель)
  relatedTo   RelatedProducts[] @relation("RelatedTo")

  @@index([alias])
  @@index([categoryId])
}

model RelatedProducts {
  id   Int                 @id @default(autoincrement())
  type ProductRelationType

  // От какого товара связь (источник)
  fromProduct   Product @relation("RelatedFrom", fields: [fromProductId], references: [id], onDelete: Cascade)
  fromProductId Int

  // К какому товару связь (цель)
  toProduct   Product @relation("RelatedTo", fields: [toProductId], references: [id], onDelete: Cascade)
  toProductId Int

  // Уникальный ключ, чтобы избежать дубликатов связей
  @@unique([fromProductId, toProductId, type])
}

enum ProductRelationType {
  UPSELL
  BUNDLE
  SIMILAR
  CROSS_SELL
}

model Color {
  id       Int                @id @default(autoincrement())
  name     String
  image    String
  products ColorsOnProducts[]
}

model ColorsOnProducts {
  colorId    Int
  productId  Int
  assignedAt DateTime @default(now())
  assignedBy String
  color      Color    @relation(fields: [colorId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@id([colorId, productId])
}

model Order {
  id        Int         @id @default(autoincrement())
  status    OrderStatus @default(PENDING)
  name      String
  phone     String
  email     String
  address   String
  payment   PaymentType @default(CASH)
  userId    String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User?       @relation(fields: [userId], references: [id])
  items     OrderItem[] // Связь с товарами через промежуточную таблицу
}

model OrderItem {
  id           Int     @id @default(autoincrement())
  orderId      Int
  productId    Int
  quantity     Int     @default(1)
  priceAtOrder String // Цена на момент заказа (защита от изменений)
  order        Order   @relation(fields: [orderId], references: [id])
  product      Product @relation(fields: [productId], references: [id])
}

model Callback {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IndividualOrder {
  id        Int     @id @default(autoincrement())
  name      String
  email     String?
  phone     String
  productId Int

  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Slide {
  id                  Int     @id @default(autoincrement())
  title               String?
  subTitle            String?
  informerTitle       String?
  buttonText          String?
  href                String?
  imageSrc            String
  informerDescription String?
}

model Page {
  id              Int      @id @default(autoincrement())
  name            String
  metaTitle       String?
  metaDescription String?
  text            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  alias           String   @unique
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  FINISHED
  CANCELED
}

enum PaymentType {
  CASH
  CARD
  ONLINE
  BANK_TRANSFER
}
