services:
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - web
    networks:
      - app_network

  web:
    build: .
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}?schema=public
      - NEXT_PUBLIC_INTERNAL_API_URL=${NEXT_PUBLIC_INTERNAL_API_URL}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
    volumes:
      - ./src/shared/prisma:/app/src/shared/prisma
      - /app/node_modules
      - ./.next:/app/.next
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network

  db:
    image: postgres:17-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres_backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  cron:
    image: alpine/curl
    command: >
      sh -c "
        echo '*/10 * * * * curl -X POST http://web:3000/api/db/clear' > /etc/crontabs/root &&
        crond -f -l 2
      "
    depends_on:
      - web
    networks:
      - app_network

volumes:
  postgres_data:
    driver: local
    name: interist_kitchens_pg_data

networks:
  app_network:
    driver: bridge